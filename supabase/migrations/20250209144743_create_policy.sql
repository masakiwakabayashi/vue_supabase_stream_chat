create table "public"."memos" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid,
    "title" text,
    "content" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now()
);


alter table "public"."memos" enable row level security;

alter table "public"."todo" disable row level security;

CREATE UNIQUE INDEX memos_pkey ON public.memos USING btree (id);

alter table "public"."memos" add constraint "memos_pkey" PRIMARY KEY using index "memos_pkey";

alter table "public"."memos" add constraint "memos_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."memos" validate constraint "memos_user_id_fkey";

grant delete on table "public"."memos" to "anon";

grant insert on table "public"."memos" to "anon";

grant references on table "public"."memos" to "anon";

grant select on table "public"."memos" to "anon";

grant trigger on table "public"."memos" to "anon";

grant truncate on table "public"."memos" to "anon";

grant update on table "public"."memos" to "anon";

grant delete on table "public"."memos" to "authenticated";

grant insert on table "public"."memos" to "authenticated";

grant references on table "public"."memos" to "authenticated";

grant select on table "public"."memos" to "authenticated";

grant trigger on table "public"."memos" to "authenticated";

grant truncate on table "public"."memos" to "authenticated";

grant update on table "public"."memos" to "authenticated";

grant delete on table "public"."memos" to "service_role";

grant insert on table "public"."memos" to "service_role";

grant references on table "public"."memos" to "service_role";

grant select on table "public"."memos" to "service_role";

grant trigger on table "public"."memos" to "service_role";

grant truncate on table "public"."memos" to "service_role";

grant update on table "public"."memos" to "service_role";

create policy "Allow delete on memos for user"
on "public"."memos"
as permissive
for delete
to public
using ((user_id = auth.uid()));


create policy "Allow insert on memos for user"
on "public"."memos"
as permissive
for insert
to public
with check ((user_id = auth.uid()));


create policy "Allow select on memos for user"
on "public"."memos"
as permissive
for select
to public
using ((user_id = auth.uid()));


create policy "Allow update on memos for user"
on "public"."memos"
as permissive
for update
to public
using ((user_id = auth.uid()));



